#!/bin/env python3
import argparse
import sys
import logging
import os
import glob
import taglib
import shlex
import re

log = logging.getLogger()

def is_valid_srcfolder(parser, path):
    if not os.path.exists(path):
        parser.error("'{}' doesn't exists".format(path))

    return os.path.abspath(path)

def get_args():
    parser = argparse.ArgumentParser(
            description="This program detects duplicate music files, using their tags.")

    add_arguments(parser)
    
    args = parser.parse_args()

    # If more than one folder specified, remove dupes
    if (type(args.srcdir) == list):
        args.srcdir = list(set(args.srcdir))
    # Else, we have only one folder, set it as a single element list
    else:
        args.srcdir = [args.srcdir]

    return args

def add_arguments(parser):
    # Verbosity
    parser.add_argument("-v", "--verbose", help="Increase verbosity for each ocurrence.", action="store_true", default=False)

    # Version
    parser.add_argument("-V", "--version", action="version", version="%(prog)s 1.0")

    # Source directory
    parser.add_argument("srcdir", help="Source directory to search recursively for duplicate music files.", nargs="?", type=lambda d: is_valid_srcfolder(parser, d), default=os.getcwd())

def get_logger(log_level = 0):
    # Get the logger
    module = sys.modules['__main__'].__file__
    log = logging.getLogger(module)

    # Log level
    log.setLevel(log_level)

    if (log_level == 0):
        log.disabled = True

    # Create console handler
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)

    # Create formater
    formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")

    # Add formatter to handler
    ch.setFormatter(formatter);

    #Add handler to logger
    log.addHandler(ch)

    return log

clean_title_re = re.compile(r"(\s?\w+)*")
def clean_music_title(title):
    return clean_title_re.search(title)[0].lower()

def detect_dupes(srcdir):
    if (os.path.isdir(srcdir)):
        song_titles = []
        dup_files = []

        # 'Walk' through all the files/dirs in the srcdir
        for root, dirs, files in os.walk(srcdir, topdown=False):
            # Query all the files
            for song_file in files:
                # Get file full path
                path = os.path.join(root, song_file)

                # Tries to get song info
                try:
                    # Parse the libs
                    song = taglib.File(path)

                    # Get song title
                    title = song.tags["TITLE"][0]
                    
                    # Clean it
                    title = clean_music_title(title)

                    log.debug("Checking if '{}' is a dupe".format(title))

                    # If duplicate
                    if title in song_titles:
                        # Sends a clean path to dupe files
                        dup_files.append(shlex.quote(path))
                        log.debug("Dupe Detected: '{}'".format(title))
                    else:
                        song_titles.append(title)
                        log.debug("Not Dupe Detected: '{}'".format(title))

                except:
                    log.warn("'{}' doesn't has tags.".format(path))
                    pass

        print(' '.join(dup_files))


if __name__ == "__main__":
    args = get_args()

    log_level = 0
    if (args.verbose):
        log_level = 10

    log = get_logger(log_level)

    log.info("Searching for dupes in '{}'".format(args.srcdir))

    for srcdir in args.srcdir:
        detect_dupes(srcdir)
